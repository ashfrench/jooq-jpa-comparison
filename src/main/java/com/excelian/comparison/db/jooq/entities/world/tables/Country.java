/**
 * This class is generated by jOOQ
 */
package com.excelian.comparison.db.jooq.entities.world.tables;


import com.excelian.comparison.db.jooq.entities.world.Keys;
import com.excelian.comparison.db.jooq.entities.world.World;
import com.excelian.comparison.db.jooq.entities.world.enums.CountryContinent;
import com.excelian.comparison.db.jooq.entities.world.tables.records.CountryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Country extends TableImpl<CountryRecord> {

    private static final long serialVersionUID = -1583768670;

    /**
     * The reference instance of <code>world.country</code>
     */
    public static final Country COUNTRY = new Country();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRecord> getRecordType() {
        return CountryRecord.class;
    }

    /**
     * The column <code>world.country.Code</code>.
     */
    public final TableField<CountryRecord, String> CODE = createField("Code", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.Name</code>.
     */
    public final TableField<CountryRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.CHAR.length(52).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.Continent</code>.
     */
    public final TableField<CountryRecord, CountryContinent> CONTINENT = createField("Continent", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.excelian.comparison.db.jooq.entities.world.enums.CountryContinent.class), this, "");

    /**
     * The column <code>world.country.Region</code>.
     */
    public final TableField<CountryRecord, String> REGION = createField("Region", org.jooq.impl.SQLDataType.CHAR.length(26).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.SurfaceArea</code>.
     */
    public final TableField<CountryRecord, Double> SURFACEAREA = createField("SurfaceArea", org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>world.country.IndepYear</code>.
     */
    public final TableField<CountryRecord, Short> INDEPYEAR = createField("IndepYear", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>world.country.Population</code>.
     */
    public final TableField<CountryRecord, Integer> POPULATION = createField("Population", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>world.country.LifeExpectancy</code>.
     */
    public final TableField<CountryRecord, Double> LIFEEXPECTANCY = createField("LifeExpectancy", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.GNP</code>.
     */
    public final TableField<CountryRecord, Double> GNP = createField("GNP", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.GNPOld</code>.
     */
    public final TableField<CountryRecord, Double> GNPOLD = createField("GNPOld", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.LocalName</code>.
     */
    public final TableField<CountryRecord, String> LOCALNAME = createField("LocalName", org.jooq.impl.SQLDataType.CHAR.length(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.GovernmentForm</code>.
     */
    public final TableField<CountryRecord, String> GOVERNMENTFORM = createField("GovernmentForm", org.jooq.impl.SQLDataType.CHAR.length(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.HeadOfState</code>.
     */
    public final TableField<CountryRecord, String> HEADOFSTATE = createField("HeadOfState", org.jooq.impl.SQLDataType.CHAR.length(60), this, "");

    /**
     * The column <code>world.country.Capital</code>.
     */
    public final TableField<CountryRecord, Integer> CAPITAL = createField("Capital", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>world.country.Code2</code>.
     */
    public final TableField<CountryRecord, String> CODE2 = createField("Code2", org.jooq.impl.SQLDataType.CHAR.length(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>world.country</code> table reference
     */
    public Country() {
        this("country", null);
    }

    /**
     * Create an aliased <code>world.country</code> table reference
     */
    public Country(String alias) {
        this(alias, COUNTRY);
    }

    private Country(String alias, Table<CountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Country(String alias, Table<CountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return World.WORLD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountryRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountryRecord>> getKeys() {
        return Arrays.<UniqueKey<CountryRecord>>asList(Keys.KEY_COUNTRY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Country as(String alias) {
        return new Country(alias, this);
    }

    /**
     * Rename this table
     */
    public Country rename(String name) {
        return new Country(name, null);
    }
}
