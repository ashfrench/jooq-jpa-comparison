/**
 * This class is generated by jOOQ
 */
package com.excelian.comparison.db.jooq.entities.sakila.tables;


import com.excelian.comparison.db.jooq.entities.sakila.Keys;
import com.excelian.comparison.db.jooq.entities.sakila.Sakila;
import com.excelian.comparison.db.jooq.entities.sakila.tables.records.StaffRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staff extends TableImpl<StaffRecord> {

    private static final long serialVersionUID = -1269980994;

    /**
     * The reference instance of <code>sakila.staff</code>
     */
    public static final Staff STAFF = new Staff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffRecord> getRecordType() {
        return StaffRecord.class;
    }

    /**
     * The column <code>sakila.staff.staff_id</code>.
     */
    public final TableField<StaffRecord, UByte> STAFF_ID = createField("staff_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sakila.staff.first_name</code>.
     */
    public final TableField<StaffRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>sakila.staff.last_name</code>.
     */
    public final TableField<StaffRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>sakila.staff.address_id</code>.
     */
    public final TableField<StaffRecord, UShort> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sakila.staff.picture</code>.
     */
    public final TableField<StaffRecord, byte[]> PICTURE = createField("picture", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>sakila.staff.email</code>.
     */
    public final TableField<StaffRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>sakila.staff.store_id</code>.
     */
    public final TableField<StaffRecord, UByte> STORE_ID = createField("store_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sakila.staff.active</code>.
     */
    public final TableField<StaffRecord, Byte> ACTIVE = createField("active", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sakila.staff.username</code>.
     */
    public final TableField<StaffRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false), this, "");

    /**
     * The column <code>sakila.staff.password</code>.
     */
    public final TableField<StaffRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "");

    /**
     * The column <code>sakila.staff.last_update</code>.
     */
    public final TableField<StaffRecord, Timestamp> LAST_UPDATE = createField("last_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>sakila.staff</code> table reference
     */
    public Staff() {
        this("staff", null);
    }

    /**
     * Create an aliased <code>sakila.staff</code> table reference
     */
    public Staff(String alias) {
        this(alias, STAFF);
    }

    private Staff(String alias, Table<StaffRecord> aliased) {
        this(alias, aliased, null);
    }

    private Staff(String alias, Table<StaffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sakila.SAKILA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StaffRecord, UByte> getIdentity() {
        return Keys.IDENTITY_STAFF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StaffRecord> getPrimaryKey() {
        return Keys.KEY_STAFF_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StaffRecord>> getKeys() {
        return Arrays.<UniqueKey<StaffRecord>>asList(Keys.KEY_STAFF_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StaffRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StaffRecord, ?>>asList(Keys.FK_STAFF_ADDRESS, Keys.FK_STAFF_STORE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staff as(String alias) {
        return new Staff(alias, this);
    }

    /**
     * Rename this table
     */
    public Staff rename(String name) {
        return new Staff(name, null);
    }
}
